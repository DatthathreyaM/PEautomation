name: Production Deployment

on:
  workflow_dispatch:
    inputs:
      subscription:
        description: 'Subscription'
        required: true
        type: choice
        options:
          - dbse-p-1
          - dbsm-p-1
      resource_group:
        description: 'Resource Group'
        required: true
        type: string
      vnet_name:
        description: 'VNet Name'
        required: true
        type: choice
        options:
          - dbse-p-vnet1
          - dbse-p-vnet2
          - dbse-p-vnet3
          - dbsm-p-vnet1
          - dbsm-p-vnet2
          - dbsm-p-vnet3
      subnet_name:
        description: 'Subnet Name'
        required: true
        type: string
      resource_type:
        description: 'Resource Type'
        required: true
        type: choice
        options:
          - Storage Account
          - Cosmos DB
          - Key Vault
          - SQL
          - Data Factory
          - Search Service
      subresource_name:
        description: 'Sub Resource Name'
        required: true
        type: choice
        options: []
      resource_name:
        description: 'Resource Name'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: ssppaps1arpscr1.azurecr.io/ubuntu2204-build-agent:latest
      credentials:
        username: ${{ secrets.AZURE_USERNAME }}
        password: ${{ secrets.AZURE_PASSWORD }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up service principal
      run: |
        echo "Using production service principals"
        echo "ARM_CLIENT_ID=${{ secrets.SP_AZURE_DNAE_PROD_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.SP_AZURE_DNAE_PROD_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ github.event.inputs.subscription_id }}" >> $GITHUB_ENV

    - name: Create branch
      run: |
        git checkout -b "pe-deployment-${{ github.event.inputs.resource_name }}"

    - name: Generate JSON configuration
      run: |
        ./scripts/generate-config.ps1 `
          -subscriptionName ${{ inputs.subscription }} `
          -resourceGroupName ${{ inputs.resource_group }} `
          -vnetName ${{ inputs.vnet_name }} `
          -subnetName ${{ inputs.subnet_name }} `
          -resourceType ${{ inputs.resource_type }} `
          -subResourceName ${{ inputs.subresource_name }} `
          -resourceName ${{ inputs.resource_name }}

    - name: Verification
      run: |
        ./scripts/verification.ps1 `
          -subscriptionName ${{ inputs.subscription }} `
          -resourceGroupName ${{ inputs.resource_group }} `
          -vnetName ${{ inputs.vnet_name }} `
          -subnetName ${{ inputs.subnet_name }} `
          -resourceType ${{ inputs.resource_type }} `
          -subResourceName ${{ inputs.subresource_name }} `
          -resourceName ${{ inputs.resource_name }}

    - name: Install Terraform
      run: |
        curl -fsSL https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip -o terraform.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/

    - name: Initialize Terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=AZURECENGSA50" \
          -backend-config="resource_group_name=azure-sa-rg-1" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ inputs.subscription }}/${{ inputs.resource_group }}.tfstate" \
          -backend-config="access_key=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}"

    - name: Terraform Plan
      run: |
        if [ "${{ inputs.resource_type }}" = "Cosmos DB" ]; then
          terraform plan -out=tfplan -module=private_endpoint_v2 -var-file=private_endpoint_config.json
        else
          terraform plan -out=tfplan -module=private_endpoint_v1 -var-file=private_endpoint_config.json
        fi
      env:
        ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: Encrypt Plan File
      run: |
        openssl enc -aes-256-cbc -salt -in tfplan -out tfplan.enc -k ${{ secrets.ENCRYPTION_KEY }}
        rm tfplan

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: tfplan
        path: tfplan.enc

    - name: Configure Git
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Commit and Push
      run: |
        git add .
        git commit -m "Deploy private endpoint for ${{ inputs.resource_name }}"
        git push origin "pe-deployment-${{ github.event.inputs.resource_name }}"

    - name: Terraform Apply
      run: |
        terraform apply tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.SP_DNAE_PRD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.SP_DNAE_PRD_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}

    - name: Cleanup
      run: |
        git remote set-url origin https://github.com/${{ github.repository }}.git